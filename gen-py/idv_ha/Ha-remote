#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from idv_ha import Ha
from idv_ha.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   prepared( disk)'
  print '  bool created_with_others(string ip1, string ip2)'
  print '  i32 setup(NetInfo net, DrbdInfo drbd, bool is_master, bool is_force)'
  print '  i32 modify(NetInfo net)'
  print '  i32 remove(bool is_master)'
  print '  i32 report_disk_error_info( disk)'
  print '  i32 drbd_health_check()'
  print '  i32 idv_service_check()'
  print '  i32 net_health_check()'
  print '  void switch_master()'
  print '  void switch_backup()'
  print '  void switch_faults()'
  print '  bool ready_to_sync(i32 res_num)'
  print '   get_ha_info()'
  print '  string get_hostname()'
  print '   get_drbd_state()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Ha.Client(protocol)
transport.open()

if cmd == 'prepared':
  if len(args) != 1:
    print 'prepared requires 1 args'
    sys.exit(1)
  pp.pprint(client.prepared(eval(args[0]),))

elif cmd == 'created_with_others':
  if len(args) != 2:
    print 'created_with_others requires 2 args'
    sys.exit(1)
  pp.pprint(client.created_with_others(args[0],args[1],))

elif cmd == 'setup':
  if len(args) != 4:
    print 'setup requires 4 args'
    sys.exit(1)
  pp.pprint(client.setup(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'modify':
  if len(args) != 1:
    print 'modify requires 1 args'
    sys.exit(1)
  pp.pprint(client.modify(eval(args[0]),))

elif cmd == 'remove':
  if len(args) != 1:
    print 'remove requires 1 args'
    sys.exit(1)
  pp.pprint(client.remove(eval(args[0]),))

elif cmd == 'report_disk_error_info':
  if len(args) != 1:
    print 'report_disk_error_info requires 1 args'
    sys.exit(1)
  pp.pprint(client.report_disk_error_info(eval(args[0]),))

elif cmd == 'drbd_health_check':
  if len(args) != 0:
    print 'drbd_health_check requires 0 args'
    sys.exit(1)
  pp.pprint(client.drbd_health_check())

elif cmd == 'idv_service_check':
  if len(args) != 0:
    print 'idv_service_check requires 0 args'
    sys.exit(1)
  pp.pprint(client.idv_service_check())

elif cmd == 'net_health_check':
  if len(args) != 0:
    print 'net_health_check requires 0 args'
    sys.exit(1)
  pp.pprint(client.net_health_check())

elif cmd == 'switch_master':
  if len(args) != 0:
    print 'switch_master requires 0 args'
    sys.exit(1)
  pp.pprint(client.switch_master())

elif cmd == 'switch_backup':
  if len(args) != 0:
    print 'switch_backup requires 0 args'
    sys.exit(1)
  pp.pprint(client.switch_backup())

elif cmd == 'switch_faults':
  if len(args) != 0:
    print 'switch_faults requires 0 args'
    sys.exit(1)
  pp.pprint(client.switch_faults())

elif cmd == 'ready_to_sync':
  if len(args) != 1:
    print 'ready_to_sync requires 1 args'
    sys.exit(1)
  pp.pprint(client.ready_to_sync(eval(args[0]),))

elif cmd == 'get_ha_info':
  if len(args) != 0:
    print 'get_ha_info requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_ha_info())

elif cmd == 'get_hostname':
  if len(args) != 0:
    print 'get_hostname requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_hostname())

elif cmd == 'get_drbd_state':
  if len(args) != 0:
    print 'get_drbd_state requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_drbd_state())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
